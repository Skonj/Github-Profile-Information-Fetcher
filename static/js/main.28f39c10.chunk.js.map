{"version":3,"sources":["Footer.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","App","useState","name","setName","userName","setUsername","followers","setFollowers","following","setFollowing","repos","setRepos","avatar","setAvatar","userInput","setUserInput","error","setError","useEffect","fetch","then","res","json","data","setData","login","public_repos","avatar_url","Form","onSubmit","message","Group","Input","placeholder","onChange","e","target","value","Button","content","Card","Image","src","wrapped","ui","Content","Header","extra","Icon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"yUAYeA,MARf,WACE,OACE,yBAAKC,UAAU,UACb,8C,OC0GSC,MA1Gf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEmBF,mBAAS,KAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGqBJ,mBAAS,IAH9B,mBAGNK,EAHM,KAGKC,EAHL,OAIqBN,mBAAS,IAJ9B,mBAINO,EAJM,KAIKC,EAJL,OAKaR,mBAAS,IALtB,mBAKNS,EALM,KAKCC,EALD,OAMeV,mBAAS,IANxB,mBAMNW,EANM,KAMEC,EANF,OAQqBZ,mBAAS,IAR9B,mBAQNa,EARM,KAQKC,EARL,OAUad,mBAAS,MAVtB,mBAUNe,EAVM,KAUCC,EAVD,KAYbC,qBAAU,WACRC,MAAM,wCACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLC,EAAQD,QAEX,IAEH,IAAMC,EAAU,SAAC,GAOV,IANLtB,EAMI,EANJA,KACAuB,EAKI,EALJA,MACAnB,EAII,EAJJA,UACAE,EAGI,EAHJA,UACAkB,EAEI,EAFJA,aACAC,EACI,EADJA,WAEAxB,EAAQD,GACRG,EAAYoB,GACZlB,EAAaD,GACbG,EAAaD,GACbG,EAASe,GACTb,EAAUc,IAoBZ,OACE,yBAAK5B,UAAU,OACb,yBAAKA,UAAU,UAAf,sCACA,yBAAKA,UAAU,UACb,kBAAC6B,EAAA,EAAD,CAAMC,SAjBS,WACnBV,MAAM,gCAAD,OAAiCL,IACnCM,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACDA,EAAKO,QACPb,EAASM,EAAKO,UAEdN,EAAQD,GACRN,EAAS,YAUT,kBAACW,EAAA,EAAKG,MAAN,KACE,kBAACH,EAAA,EAAKI,MAAN,CACEC,YAAY,wBACZ/B,KAAK,cACLgC,SA1BS,SAACC,GACpBpB,EAAaoB,EAAEC,OAAOC,UA2Bd,kBAACT,EAAA,EAAKU,OAAN,CAAaC,QAAQ,cAI1BvB,EACC,4BAAKA,GAEL,yBAAKjB,UAAU,QACb,kBAACyC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAK9B,EAAQ+B,SAAO,EAACC,IAAI,IAChC,kBAACJ,EAAA,EAAKK,QAAN,KACE,kBAACL,EAAA,EAAKM,OAAN,KAAc5C,GACd,kBAACsC,EAAA,EAAKM,OAAN,KAAc1C,IAEhB,kBAACoC,EAAA,EAAKK,QAAN,CAAcE,OAAK,GACjB,2BACE,kBAACC,EAAA,EAAD,CAAM9C,KAAK,SACVI,EAFH,eAKF,kBAACkC,EAAA,EAAKK,QAAN,CAAcE,OAAK,GACjB,2BACE,kBAACC,EAAA,EAAD,CAAM9C,KAAK,SACVM,EAFH,eAKF,kBAACgC,EAAA,EAAKK,QAAN,CAAcE,OAAK,GACjB,2BACE,kBAACC,EAAA,EAAD,CAAM9C,KAAK,SACVQ,EAFH,aAQR,6BACE,kBAAC,EAAD,SC/FYuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAhD,GACLiD,QAAQjD,MAAMA,EAAMc,c","file":"static/js/main.28f39c10.chunk.js","sourcesContent":["import \"./Footer.css\";\r\n\r\nimport React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"footer\">\r\n      <p>Made by skonj</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Form, Card, Icon, Image } from \"semantic-ui-react\";\nimport Footer from \"./Footer.js\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [name, setName] = useState(\"\");\n  const [userName, setUsername] = useState(\" \");\n  const [followers, setFollowers] = useState(\"\");\n  const [following, setFollowing] = useState(\"\");\n  const [repos, setRepos] = useState(\"\");\n  const [avatar, setAvatar] = useState(\"\");\n\n  const [userInput, setUserInput] = useState(\"\");\n\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetch(\"https://api.github.com/users/example\")\n      .then((res) => res.json())\n      .then((data) => {\n        setData(data);\n      });\n  }, []);\n\n  const setData = ({\n    name,\n    login,\n    followers,\n    following,\n    public_repos,\n    avatar_url,\n  }) => {\n    setName(name);\n    setUsername(login);\n    setFollowers(followers);\n    setFollowing(following);\n    setRepos(public_repos);\n    setAvatar(avatar_url);\n  };\n\n  const handleSearch = (e) => {\n    setUserInput(e.target.value);\n  };\n\n  const handleSubmit = () => {\n    fetch(`https://api.github.com/users/${userInput}`)\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.message) {\n          setError(data.message);\n        } else {\n          setData(data);\n          setError(null);\n        }\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"navbar\">Github Profile Information Fetcher</div>\n      <div className=\"search\">\n        <Form onSubmit={handleSubmit}>\n          <Form.Group>\n            <Form.Input\n              placeholder=\"Input Github Username\"\n              name=\"Github user\"\n              onChange={handleSearch}\n            />\n            <Form.Button content=\"Search\" />\n          </Form.Group>\n        </Form>\n      </div>\n      {error ? (\n        <h1>{error}</h1>\n      ) : (\n        <div className=\"Card\">\n          <Card>\n            <Image src={avatar} wrapped ui={false} />\n            <Card.Content>\n              <Card.Header>{name}</Card.Header>\n              <Card.Header>{userName}</Card.Header>\n            </Card.Content>\n            <Card.Content extra>\n              <a>\n                <Icon name=\"user\" />\n                {followers} Followers\n              </a>\n            </Card.Content>\n            <Card.Content extra>\n              <a>\n                <Icon name=\"user\" />\n                {following} Following\n              </a>\n            </Card.Content>\n            <Card.Content extra>\n              <a>\n                <Icon name=\"user\" />\n                {repos} Repos\n              </a>\n            </Card.Content>\n          </Card>\n        </div>\n      )}\n      <div>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}